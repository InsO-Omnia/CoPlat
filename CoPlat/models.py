from django.db import models
from django.contrib.auth.models import User
# Create your models here.

#######################################################################
# For CoPlat - version 1.0beta
#
# Author: Hangyu He
# Updated by: Cloudyrie
#
# Description:
# models.py is used to implement users or data entities of CoPlat.
# Each class here is associated with a table in database which is
# automatically generated by the django framework. The users
# classes have one-to-one foreign-key with User objects.
#
# Naming Covention:
# For all user entities, assgin a 'Id' as primary key, and 'No' for
# other entities. Besides, names of other fields are capitalized
# and use an underline between any two single word under compound
# situation. Specially, for foreign key fields, their name is the
# name of the associated model in lowercase.
#
#License: GPL
#######################################################################

#######################################################################
# User entities models use foreign key to the User class
#######################################################################

class Admin(models.Model):
    user = models.OneToOneField(User, on_delete = models.CASCADE)
    Id = models.CharField(max_length = 50, primary_key = True)

class Teacher(models.Model):
    user = models.OneToOneField(User, on_delete = models.CASCADE)
    Id = models.CharField(max_length = 50,  primary_key = True)

class Student(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    Id = models.CharField(max_length = 50,  primary_key = True)

#######################################################################
# Other entities models
#######################################################################

class Semester(models.Model):
    No = models.CharField(max_length = 50, primary_key = True)
    Start_Date = models.DateField()
    End_Date = models.DateField()
    Duration_Weeks = models.PositiveIntegerField()
    def get_semester_info(self):
        info = {
            "starttime" : str(self.Start_Date),
            "endtime" : str(self.End_Date),
            "weeks" : str(self.Duration_Weeks),
        }
        return info

class Course(models.Model):
    No = models.CharField(max_length = 50, primary_key = True)
    Title = models.CharField(max_length = 50)
    Credit = models.FloatField(max_length = 10)
    Start_Date = models.DateField()
    End_Date = models.DateField()
    Duration = models.PositiveIntegerField()
    Enrolled_Students = models.ManyToManyField(Student, through = 'Enrollment')
    Course_Instructors = models.ManyToManyField(Teacher, through = 'Instruction')
    semester = models.ForeignKey(Semester, on_delete = models.CASCADE)

class Coursework(models.Model):
    No = models.CharField(max_length = 50, primary_key = True)
    Description = models.CharField(max_length = 2000)
    Start_Time = models.DateTimeField()
    End_Time  = models.DateTimeField()
    #Is_Teamwork = models.BooleanField()
    Enrolled_Students = models.ManyToManyField(Student, through = 'Assignment')
    course = models.ForeignKey(Course, on_delete = models.CASCADE)

class Resource(models.Model):
    No = models.CharField(max_length = 50, primary_key = True)
    Description = models.CharField(max_length = 2000)
    Attachment = models.FileField(upload_to = 'Resource')
    #Choice for category
    UN = 'uncategoried'
    HA = 'handouts'
    VE = 'vedio'
    DO = 'documentation'
    Category_Choice = {
        (UN, 'UNCATEGORIED'),
        (HA, 'HANDOUTS'),
        (VE, 'VEDIO'),
        (DO, 'DOCUMENTATION'),
    }
    Category = models.CharField(max_length = 20, choices = Category_Choice, default = UN,)
    course = models.ForeignKey(Course, on_delete = models.CASCADE)


# class Team(models.Model):
#     No = models.CharField(max_length = 128)
#     Name = models.CharField(max_length = 500)
#     Members = models.ManyToManyField(Student, through='Membership')

#####################################################################
# Many-to-many Relationship models, including:
# 1. Enrollment: Relationship between Students and Courses.
# 2. Instruction: Relationship between Teachers and Courses.
# 3. Assignment: Relationship between Students and Coursework.
#####################################################################

class Enrollment(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)

class Instruction(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)

class Assignment(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    coursework = models.ForeignKey(Coursework, on_delete=models.CASCADE)
    Content = models.CharField(max_length=2000)
    Attachment = models.FileField(upload_to = 'Coursework')
    Score = models.IntegerField()
    Comment = models.CharField(max_length=2000)

# class Membership(models.Model):
#     Student = models.ForeignKey(Student, on_delete=models.CASCADE)
#     Team = models.ForeignKey(Team, on_delete=models.CASCADE)
